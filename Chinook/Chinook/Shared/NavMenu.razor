@using Chinook.Models;
@using Chinook.Services;

@inject IUserService UserService
@inject IPlaylistService PlaylistService
@inject NavigationManager NavigationManager
@inject INavMenuService NavMenuService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        @foreach (var playlist in userPlaylists.Where(x => x.UserPlaylists.Count > 0))
        {
            <div class="nav-item px-3">

                <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="@(() => NavigateToPlaylist(playlist.PlaylistId))">
                    <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>@playlist.Name
            </NavLink>

        </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string lastRenderTime;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private string currentUserId;

    private List<Playlist> userPlaylists;
  
    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        currentUserId = await UserService.GetUserId(authenticationState);
      
        userPlaylists = await PlaylistService.GetUserPlaylists(currentUserId);
        NavMenuService.OnReloadTestComponentRequested += Reload;

    }

    private void Reload()
    {
        lastRenderTime = DateTime.Now.ToString("HH:mm:ss");
        StateHasChanged();
        currentUserId = UserService.GetUserId(authenticationState).Result;

        userPlaylists = PlaylistService.GetUserPlaylists(currentUserId).Result;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void NavigateToPlaylist(long playlistId)
    {
        NavigationManager.NavigateTo($"/playlist/{playlistId}");
    }
}
