@using Chinook.Models;
@using Chinook.Services;
@inject UserService UserService
@inject PlaylistService PlaylistService
@inject NavigationManager NavigationManager


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3">

            <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="@(() => NavigateToPlaylist())">
                <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>My favorite tracks
            </NavLink>

        </div>

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    [Parameter]
    public long PlaylistId { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private string CurrentUserId;
    private List<Playlist> UserPlaylists;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await UserService.GetUserId(AuthenticationState);
      
        UserPlaylists = await PlaylistService.GetUserPlaylists(CurrentUserId);

    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void NavigateToPlaylist()
    {
        PlaylistId = UserPlaylists.Where(p => p.Name == "Favorites").Select(x=>x.PlaylistId).FirstOrDefault();
        NavigationManager.NavigateTo($"/playlist/{PlaylistId}");
    }
}
