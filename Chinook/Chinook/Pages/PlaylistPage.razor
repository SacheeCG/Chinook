@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]
@inject UserService UserService
@inject PlaylistService PlaylistService
@inject ArtistService ArtistService


@using Chinook.ClientModels;
@using Chinook.Models
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<h1>Playlist <strong>@FavoritePlaylist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (FavoritePlaylist == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (FavoritePlaylist.Tracks != null)
            {
                @foreach (var track in FavoritePlaylist.Tracks)
                {
                    <tr>
                        <td>@Album.Where(x=>x.AlbumId == @track.AlbumId).Select(x=>x.Artist.Name).FirstOrDefault() - @Album.Where(x=>x.AlbumId == @track.AlbumId).Select(x=>x.Title).FirstOrDefault() - @track.Name</td>
                        <td>
                            <div class="d-flex">
                                @if (FavoritePlaylist.Name != "Favorites")
                                {
                                    @if (track.IsFavorite)
                                    {
                                        <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                                    }
                                    else
                                    {
                                        <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                                    }

                                }
                                @if (FavoritePlaylist.Name == "Favorites")
                                {
                                    @if (track.IsFavorite)
                                    {
                                        <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                                    }
                                    else
                                    {
                                        <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                                    }

                                }
                                <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private Chinook.Models.Playlist FavoritePlaylist;
    private List<Chinook.Models.Album> Album;
    private string CurrentUserId;
    private string InfoMessage;

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await UserService.GetUserId(AuthenticationState);

        await InvokeAsync(StateHasChanged);

        FavoritePlaylist = PlaylistService.GetFavoritePlaylistByUser(PlaylistId, CurrentUserId).Result;

        Album = PlaylistService.GetAlbums().Result;
    }

    private void ToggleFavorite(Chinook.Models.Track track)
    {
        track.IsFavorite = !track.IsFavorite;

        if (track.IsFavorite)
        {
            this.FavoriteTrack(track);
        }
        else
        {
            this.UnfavoriteTrack(track);
        }
    }

    private async void FavoriteTrack(Chinook.Models.Track track)
    {
        var markedTrack = FavoritePlaylist.Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        track.IsFavorite = true;
        var playlistName = "Favorites";
        var favoritePlaylist = PlaylistService.GetPlaylistByName(playlistName).Result;
        var selectedTrack = ArtistService.GetTrackById(track.TrackId).Result;

        if (favoritePlaylist == null)
        {
            favoritePlaylist = new Chinook.Models.Playlist { Name = "Favorites" };
            await PlaylistService.AddAsync(favoritePlaylist);
        }

        if (!favoritePlaylist.Tracks.Contains(selectedTrack))
        {
            selectedTrack.IsFavorite = true;
            favoritePlaylist.UserPlaylists = new List<UserPlaylist> { new UserPlaylist { UserId = CurrentUserId } };
            favoritePlaylist.Tracks.Add(selectedTrack);
            await PlaylistService.AddAsync(favoritePlaylist);
        }
        InfoMessage = $"Track {Album.Where(x => x.AlbumId == @track.AlbumId).Select(x => x.Artist.Name).FirstOrDefault()} - {Album.Where(x => x.AlbumId == @track.AlbumId).Select(x => x.Title).FirstOrDefault()} - {track.Name} added to playlist Favorites.";
    }

    private async Task UnfavoriteTrack(Chinook.Models.Track track)
    {
        var selectedTrack = FavoritePlaylist.Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        track.IsFavorite = false;
        var playlistName = "Favorites";
        var existingPlaylists = PlaylistService.GetPlaylistByName(playlistName);
        var favoritePlayList = new Chinook.Models.Playlist();

        var trackSelected = new Track()
            {
                TrackId = selectedTrack.TrackId,
                Name = selectedTrack.Name,
                IsFavorite = false
            };

        favoritePlayList.Name = existingPlaylists.Result.Name;
        trackSelected.IsFavorite = false;
        favoritePlayList.Tracks.Add(trackSelected);
       
        InfoMessage = $"Track {Album.Where(x => x.AlbumId == @track.AlbumId).Select(x => x.Artist.Name).FirstOrDefault()} - {Album.Where(x => x.AlbumId == @track.AlbumId).Select(x => x.Title).FirstOrDefault()}  - {track.Name} removed from playlist Favorites.";
        await PlaylistService.UpdateAsync(favoritePlayList);
    }

    private async void RemoveTrack(Chinook.Models.Track track)
    {
        var selectedTrack = FavoritePlaylist.Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        var playlistName = "Favorites";
        var favoritePlaylist = await PlaylistService.GetPlaylistByName(playlistName);

        if (favoritePlaylist.Tracks.Any())
        {
            selectedTrack.IsFavorite = false;
            favoritePlaylist.Tracks.Remove(selectedTrack);
            await PlaylistService.UpdateAsync(favoritePlaylist);
        }
        CloseInfoMessage();

    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
