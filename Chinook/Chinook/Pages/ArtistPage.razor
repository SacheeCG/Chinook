@page "/artist/{ArtistId:long}"
@attribute [Authorize]
@inject ArtistService ArtistService
@inject UserService UserService
@inject PlaylistService PlaylistService
@inject NavMenuService NavMenuService

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;


@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    private Modal PlaylistDialog { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    private Artist Artist;
    private List<ClientModels.PlaylistTrack> Tracks;
    private ClientModels.PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    public string SelectedPlayist;
    string NewPlaylistName;
    private List<Models.Playlist> UserPlaylists;
    [Parameter] public List<string> DropdownItems { get; set; }
    [Parameter] public string SelectedValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);

        CurrentUserId = await UserService.GetUserId(AuthenticationState);

        Artist = await ArtistService.GetById(ArtistId);

        Tracks = await ArtistService.GetAllTracksByArtist(ArtistId, CurrentUserId);

        UserPlaylists = await PlaylistService.GetUserPlaylists(CurrentUserId);
    }

    private void ToggleFavorite(ClientModels.PlaylistTrack track)
    {
        track.IsFavorite = !track.IsFavorite;

        if (track.IsFavorite)
        {
            this.FavoriteTrack(track);
        }
        else
        {
            this.UnfavoriteTrack(track);
        }
    }

    private async Task FavoriteTrack(ClientModels.PlaylistTrack track)
    {
        try
        {
            var markedTrack = Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
            track.IsFavorite = true;
            var playlistName = "My favorite tracks";
            var favoritePlaylist = await PlaylistService.GetPlaylistByName(playlistName);
            var selectedTrack = await ArtistService.GetTrackById(track.TrackId);
            selectedTrack.IsFavorite = true;

            if (favoritePlaylist == null)
            {
                favoritePlaylist = new Chinook.Models.Playlist
                    {
                        Name = "My favorite tracks",
                        UserPlaylists = new List<UserPlaylist> { new UserPlaylist { UserId = CurrentUserId } },
                        Tracks = new List<Track> {
                            new Track
                            {
                                Name = selectedTrack.Name,
                                AlbumId = selectedTrack.AlbumId,
                                Bytes = selectedTrack.Bytes,
                                Composer = selectedTrack.Composer,
                                GenreId = selectedTrack.GenreId, Album = selectedTrack.Album, Genre = selectedTrack.Genre, InvoiceLines = selectedTrack.InvoiceLines, IsFavorite = selectedTrack.IsFavorite,
                                MediaType = selectedTrack.MediaType, MediaTypeId = selectedTrack.MediaTypeId, Milliseconds = selectedTrack.Milliseconds, UnitPrice = selectedTrack.UnitPrice, Playlists = selectedTrack.Playlists,
                                PlaylistTracks = selectedTrack.PlaylistTracks } }
                    };
                await PlaylistService.AddAsync(favoritePlaylist);

            }

            if (!favoritePlaylist.Tracks.Contains(selectedTrack))
            {
                var existingPlaylist = await PlaylistService.GetPlaylistByName(playlistName);

                var addedPlaylistTracks = new Models.PlaylistTrack { PlaylistId = existingPlaylist.PlaylistId, TrackId = selectedTrack.TrackId };

                var addedTrack = new Track
                    {
                        Name = selectedTrack.Name,
                        AlbumId = selectedTrack.AlbumId,
                        Bytes = selectedTrack.Bytes,
                        Composer = selectedTrack.Composer,
                        GenreId = selectedTrack.GenreId,
                        Album = selectedTrack.Album,
                        Genre = selectedTrack.Genre,
                        InvoiceLines = selectedTrack.InvoiceLines,
                        IsFavorite = selectedTrack.IsFavorite,
                        MediaType = selectedTrack.MediaType,
                        MediaTypeId = selectedTrack.MediaTypeId,
                        Milliseconds = selectedTrack.Milliseconds,
                        UnitPrice = selectedTrack.UnitPrice,
                        PlaylistTracks = selectedTrack.PlaylistTracks,
                        TrackId = selectedTrack.TrackId

                    };

                existingPlaylist.Tracks.Add(selectedTrack);
                existingPlaylist.PlaylistTracks.Add(addedPlaylistTracks);

                await ArtistService.CreateOrUpdatePlaylistTrackAsync(addedPlaylistTracks);
                await ArtistService.CreateOrUpdateTrackAsync(selectedTrack, existingPlaylist.PlaylistId);
                await PlaylistService.UpdateAsync(existingPlaylist);
            }

            InfoMessage = $"Track {markedTrack.ArtistName} - {markedTrack.AlbumTitle} - {markedTrack.TrackName} added to playlist My favorite tracks.";


        }
        catch (Exception ex)
        {

        }
        await CallNavBarInitialization();
    }


    private async Task UnfavoriteTrack(ClientModels.PlaylistTrack track)
    {
        try
        {
            var markedTrack = Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
            var selectedTrack = await ArtistService.GetTrackById(track.TrackId);
            track.IsFavorite = false;
            var playlistName = "My favorite tracks";
            var existingPlaylist = await PlaylistService.GetPlaylistByName(playlistName);

            var addedPlaylistTracks = new Models.PlaylistTrack { PlaylistId = existingPlaylist.PlaylistId, TrackId = selectedTrack.TrackId };

            var addedTrack = new Track
                {
                    Name = selectedTrack.Name,
                    AlbumId = selectedTrack.AlbumId,
                    Bytes = selectedTrack.Bytes,
                    Composer = selectedTrack.Composer,
                    GenreId = selectedTrack.GenreId,
                    Album = selectedTrack.Album,
                    Genre = selectedTrack.Genre,
                    InvoiceLines = selectedTrack.InvoiceLines,
                    IsFavorite = false,
                    MediaType = selectedTrack.MediaType,
                    MediaTypeId = selectedTrack.MediaTypeId,
                    Milliseconds = selectedTrack.Milliseconds,
                    UnitPrice = selectedTrack.UnitPrice,
                    PlaylistTracks = selectedTrack.PlaylistTracks,


                };

            existingPlaylist.Tracks.Add(selectedTrack);
            existingPlaylist.PlaylistTracks.Add(addedPlaylistTracks);

            await ArtistService.CreateOrUpdatePlaylistTrackAsync(addedPlaylistTracks);
            await ArtistService.CreateOrUpdateTrackAsync(selectedTrack, existingPlaylist.PlaylistId);

            InfoMessage = $"Track {markedTrack.ArtistName} - {markedTrack.AlbumTitle} - {markedTrack.TrackName} removed from playlist My favorite tracks.";
        }

        catch (Exception ex)
        {

        }
    }

    private async Task OpenPlaylistDialog(ClientModels.PlaylistTrack track)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        CloseInfoMessage();

        var addingTrack = new Track();
        addingTrack = await ArtistService.GetTrackById(SelectedTrack.TrackId);

        var newPlaylist = await PlaylistService.GetPlaylistByName(NewPlaylistName);

        try
        {
            if (newPlaylist == null)
            {
                newPlaylist = new Chinook.Models.Playlist
                    {
                        Name = NewPlaylistName,
                        UserPlaylists = new List<UserPlaylist> { new UserPlaylist { UserId = CurrentUserId } },

                        Tracks = new List<Track> {
                            new Track
                            {
                               Name = addingTrack.Name,
                               AlbumId = addingTrack.AlbumId,
                               Bytes = addingTrack.Bytes,
                               Composer = addingTrack.Composer,
                               GenreId = addingTrack.GenreId, Album = addingTrack.Album, Genre = addingTrack.Genre, InvoiceLines = addingTrack.InvoiceLines, IsFavorite = addingTrack.IsFavorite,
                               MediaType = addingTrack.MediaType, MediaTypeId = addingTrack.MediaTypeId, Milliseconds = addingTrack.Milliseconds, UnitPrice = addingTrack.UnitPrice
                            } }
                    };

                await PlaylistService.AddAsync(newPlaylist);
            }

            else
            {
                var existingPlaylist = await PlaylistService.GetPlaylistByName(SelectedValue);

                var addedPlaylistTracks = new Models.PlaylistTrack { PlaylistId = existingPlaylist.PlaylistId, TrackId = SelectedTrack.TrackId };

                var addedTrack = new Track
                    {
                        Name = addingTrack.Name,
                        AlbumId = addingTrack.AlbumId,
                        Bytes = addingTrack.Bytes,
                        Composer = addingTrack.Composer,
                        GenreId = addingTrack.GenreId,
                        Album = addingTrack.Album,
                        Genre = addingTrack.Genre,
                        InvoiceLines = addingTrack.InvoiceLines,
                        IsFavorite = addingTrack.IsFavorite,
                        MediaType = addingTrack.MediaType,
                        MediaTypeId = addingTrack.MediaTypeId,
                        Milliseconds = addingTrack.Milliseconds,
                        UnitPrice = addingTrack.UnitPrice,
                        PlaylistTracks = addingTrack.PlaylistTracks,
                        TrackId = addingTrack.TrackId

                    };

                existingPlaylist.Tracks.Add(addingTrack);
                existingPlaylist.PlaylistTracks.Add(addedPlaylistTracks);

                await ArtistService.CreateOrUpdatePlaylistTrackAsync(addedPlaylistTracks);
                await ArtistService.CreateOrUpdateTrackAsync(addingTrack, existingPlaylist.PlaylistId);
                await PlaylistService.UpdateAsync(existingPlaylist);
            }

            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {NewPlaylistName}.";
            PlaylistDialog.Close();


        }
        catch (Exception ex)
        {

        }
        await CallNavBarInitialization();
    }

    private async Task CallNavBarInitialization()
    {
        NavMenuService.RequestReloadTestComponent();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@SelectedTrack.ArtistName - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="SelectedValue">
                @foreach (var playlist in UserPlaylists.Where(x => x.UserPlaylists.Count > 0))
                {
                    @* <option value=""></option> *@
                    <option value="@playlist.Name">@playlist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            @if (SelectedValue == null)
            {
                <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="NewPlaylistName">
            }
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
