@page "/artist/{ArtistId:long}"
@attribute [Authorize]
@inject ArtistService ArtistService
@inject UserService UserService
@inject PlaylistService PlaylistService

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;


@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    private Modal PlaylistDialog { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);

        CurrentUserId = await UserService.GetUserId(AuthenticationState);

        Artist = ArtistService.GetByIdAsync(ArtistId).Result;

        Tracks = ArtistService.GetAllTracksByArtist(ArtistId, CurrentUserId).Result;
    }

    private void ToggleFavorite(PlaylistTrack track)
    {
        track.IsFavorite = !track.IsFavorite;

        if (track.IsFavorite)
        {
            this.FavoriteTrack(track);
        }
        else
        {
            this.UnfavoriteTrack(track);
        }
    }

    private async Task FavoriteTrack(PlaylistTrack track)
    {
        var markedTrack = Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        track.IsFavorite = true;
        var playlistName = "Favorites";
        var favoritePlaylist = PlaylistService.GetPlaylistByName(playlistName).Result;
        var selectedTrack = ArtistService.GetAllTrackById(track.TrackId).Result;

        if (favoritePlaylist == null)
        {
            favoritePlaylist = new Chinook.Models.Playlist { Name = "Favorites" };
            await PlaylistService.AddAsync(favoritePlaylist);
        }

        if (!favoritePlaylist.Tracks.Contains(selectedTrack))
        {
            selectedTrack.IsFavorite = true;
            favoritePlaylist.UserPlaylists = new List<UserPlaylist> { new UserPlaylist { UserId = CurrentUserId } };
            favoritePlaylist.Tracks.Add(selectedTrack);
            await PlaylistService.AddAsync(favoritePlaylist);
        }

        InfoMessage = $"Track {markedTrack.ArtistName} - {markedTrack.AlbumTitle} - {markedTrack.TrackName} added to playlist Favorites.";
    }

    private async Task UnfavoriteTrack(PlaylistTrack track)
    {
        var selectedTrack = Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        track.IsFavorite = false;
        var playlistName = "Favorites";
        var existingPlaylists = PlaylistService.GetPlaylistByName(playlistName);
        var favoritePlayList = new Chinook.Models.Playlist();

        var trackSelected = new Track()
            {
                TrackId = selectedTrack.TrackId,
                Name = selectedTrack.TrackName,
                IsFavorite = false
            };

        favoritePlayList.Name = existingPlaylists.Result.Name;
        trackSelected.IsFavorite = false;
        favoritePlayList.Tracks.Add(trackSelected);

        InfoMessage = $"Track {selectedTrack.ArtistName} - {selectedTrack.AlbumTitle} - {selectedTrack.TrackName} removed from playlist Favorites.";

        await PlaylistService.UpdateAsync(favoritePlayList);
    }

    private void OpenPlaylistDialog(PlaylistTrack track)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        PlaylistDialog.Open();
    }

    private void AddTrackToPlaylist()
    {
        CloseInfoMessage();
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }


}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist">
                <option>Playlist 1</option>
                <option>Playlist 2</option>
                <option>Playlist 3</option>
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
