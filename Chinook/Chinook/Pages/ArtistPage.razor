@page "/artist/{ArtistId:long}"
@attribute [Authorize]
@inject IArtistService ArtistService
@inject IUserService UserService
@inject IPlaylistService PlaylistService
@inject INavMenuService NavMenuService
@inject ITrackService TrackService
@inject IPlaylistTrackService PlaylistTrackService
@inject ILogger<ArtistPage> Logger

@using Chinook.Models
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (artist == null)
{
    <Loading />
}
else
{
    <h1>@artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => ToggleFavorite(track))" @onclick:preventDefault><i class="bi @(track.IsFavorite ? "bi-star-fill" : "bi-star")"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] 
    public long artistId { get; set; }

    private Modal playlistDialog { get; set; }

    [CascadingParameter] 
    public Task<AuthenticationState> authenticationState { get; set; }

    private ClientModels.Artist artist;

    private List<ClientModels.PlaylistTrack> tracks;

    private ClientModels.PlaylistTrack selectedTrack;

    private string infoMessage;

    private string currentUserId;

    string newPlaylistName;

    private List<Models.Playlist> userPlaylists;

    public string selectedOption { get; set; }

    [Parameter]
    public EventCallback<string> ItemChanged { get; set; }

    private bool IsInputFocused = false;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);

        currentUserId = await UserService.GetUserId(authenticationState);

        var DbArtist = await ArtistService.GetById(artistId);
        artist = ModelMapper.MapArtistToViewModel(DbArtist);

        var PlaylistTracks = await TrackService.GetTracksByArtistId(artistId);
        tracks = ModelMapper.MapPlaylistsToViewModel(PlaylistTracks);

        userPlaylists = await PlaylistService.GetUserPlaylists(currentUserId);
    }

    private void ToggleFavorite(ClientModels.PlaylistTrack track)
    {
        track.IsFavorite = !track.IsFavorite;

        if (track.IsFavorite)
        {
            this.FavoriteTrack(track);
        }
        else
        {
            this.UnfavoriteTrack(track);
        }
    }

    private async Task FavoriteTrack(ClientModels.PlaylistTrack Track)
    {
        try
        {
            var markedTrack = tracks.FirstOrDefault(t => t.TrackId == Track.TrackId);
            Track.IsFavorite = true;
            var playlistName = "My favorite tracks";
            var favoritePlaylist = await PlaylistService.GetPlaylistByName(playlistName, currentUserId);
            var selectedTrack = await TrackService.GetTrackById(Track.TrackId);

            if (favoritePlaylist == null)
            {
                favoritePlaylist = new Chinook.Models.Playlist
                    {
                        Name = "My favorite tracks",
                        UserPlaylists = new List<UserPlaylist> { new UserPlaylist { UserId = currentUserId } }
                    };
                await PlaylistService.AddAsync(favoritePlaylist);

            }

            if (!favoritePlaylist.Tracks.Contains(selectedTrack))
            {
                var existingPlaylist = await PlaylistService.GetPlaylistByName(playlistName, currentUserId);

                var addedPlaylistTracks = new Models.PlaylistTrack { PlaylistId = existingPlaylist.PlaylistId, TrackId = selectedTrack.TrackId, IsFavorite = true };

                await PlaylistTrackService.CreatePlaylistTrackAsync(addedPlaylistTracks);
            }

            infoMessage = $"Track {markedTrack.ArtistName} - {markedTrack.AlbumTitle} - {markedTrack.TrackName} added to playlist My favorite tracks.";

            await CallNavBarInitialization();
            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }


    private async Task UnfavoriteTrack(ClientModels.PlaylistTrack track)
    {
        try
        {
            var existingTrack = await TrackService.GetTrackById(track.TrackId);
            var playlistName = "My favorite tracks";

            var existingPlaylist = await PlaylistService.GetPlaylistByName(playlistName, currentUserId);

            var existingPlaylistTrack = await PlaylistTrackService.GetByIds(existingPlaylist.PlaylistId, existingTrack.TrackId);

            if (existingPlaylistTrack != null)
            {

                await PlaylistTrackService.DeletePlaylistTrackAsync(existingPlaylistTrack);
            }

            infoMessage = $"Track {existingTrack?.Album?.Artist?.Name} - {existingTrack?.Album?.Title} - {existingTrack?.Name} removed from playlist My favorite tracks.";

            StateHasChanged();
            await CallNavBarInitialization();
            await OnInitializedAsync();
        }

        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    private async Task OpenPlaylistDialog(ClientModels.PlaylistTrack track)
    {
        CloseInfoMessage();
        selectedTrack = tracks.FirstOrDefault(t => t.TrackId == track.TrackId);
        playlistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        CloseInfoMessage();

        var addingTrack = new Track();
        addingTrack = await TrackService.GetTrackById(selectedTrack.TrackId);

        var newPlaylist = await PlaylistService.GetPlaylistByName(newPlaylistName, currentUserId);

        try
        {
            if (newPlaylist == null && selectedOption == null)
            {
                newPlaylist = new Chinook.Models.Playlist
                    {
                        Name = newPlaylistName,
                        UserPlaylists = new List<UserPlaylist> { new UserPlaylist { UserId = currentUserId } },
                    };

                await PlaylistService.AddAsync(newPlaylist);

            }

            if (newPlaylist != null && selectedOption == null)
            {
                if (!newPlaylist.Tracks.Contains(addingTrack))
                {
                    var existingPlaylist = await PlaylistService.GetPlaylistByName(newPlaylistName, currentUserId);

                    var addedPlaylistTracks = new Models.PlaylistTrack { PlaylistId = existingPlaylist.PlaylistId, TrackId = selectedTrack.TrackId, IsFavorite = selectedTrack.IsFavorite };

                    await PlaylistTrackService.CreatePlaylistTrackAsync(addedPlaylistTracks);

                    infoMessage = $"Track {artist.Name} - {selectedTrack.AlbumTitle} - {selectedTrack.TrackName} added to playlist {newPlaylistName}.";

                    newPlaylistName = "";
                }
            }

            else if (selectedOption != null)
            {
                var existingPlaylist = await PlaylistService.GetPlaylistByName(selectedOption, currentUserId);

                if (existingPlaylist.Name == "My favorite tracks")
                {
                    selectedTrack.IsFavorite = true;
                }

                var addedPlaylistTracks = new Models.PlaylistTrack { PlaylistId = existingPlaylist.PlaylistId, TrackId = selectedTrack.TrackId, IsFavorite = selectedTrack.IsFavorite };

                await PlaylistTrackService.CreatePlaylistTrackAsync(addedPlaylistTracks);

                infoMessage = $"Track {artist.Name} - {selectedTrack.AlbumTitle} - {selectedTrack.TrackName} added to playlist {selectedOption}.";

                selectedOption = null;
            }

            OnInitializedAsync();
            playlistDialog.Close();

        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
        await CallNavBarInitialization();
    }

    private async Task CallNavBarInitialization()
    {
        NavMenuService.RequestReloadTestComponent();
    }

    private void CloseInfoMessage()
    {
        infoMessage = "";
    }

}

<Modal @ref="playlistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (selectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@selectedTrack.ArtistName - @selectedTrack.AlbumTitle - @selectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <InputSelect class="form-control" id="ExistingPlaylist" @bind-Value="selectedOption">
                <option value=""></option>
                @foreach (var playlist in userPlaylists.Where(x => x.UserPlaylists.Count > 0))
                {
                    <option value="@playlist.Name">@playlist.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            @* @if (SelectedValue == null)
            { *@
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="newPlaylistName">
            @* } *@
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
